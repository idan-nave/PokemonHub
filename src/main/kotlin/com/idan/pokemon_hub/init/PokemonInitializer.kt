package com.idan.pokemon_hub.init

import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.fasterxml.jackson.module.kotlin.readValue
import com.idan.pokemon_hub.model.Pokemon
import com.idan.pokemon_hub.model.PokemonImage
import com.idan.pokemon_hub.model.PokemonType
import com.idan.pokemon_hub.repository.PokemonRepository
import jakarta.annotation.PostConstruct
import org.slf4j.LoggerFactory
import org.springframework.core.io.ClassPathResource
import org.springframework.stereotype.Component
import java.net.URI

@Component
class PokemonInitializer(
    private val pokemonRepository: PokemonRepository
) {
    private val logger = LoggerFactory.getLogger(PokemonInitializer::class.java)

    data class PokemonDTO(
        val id: Int,
        val name: Name,
        val type: List<String>,
        val image: Image
    )

    data class Name(
        val english: String,
        val japanese: String? = null, // Optional fields with defaults
        val chinese: String? = null,
        val french: String? = null
    )

    data class Image(
        val hires: String,
        val sprite: String? = null, // Optional fields with defaults
        val thumbnail: String? = null
    )

    @PostConstruct
    fun init() {
        try {
            if (pokemonRepository.count() > 0) {
                logger.info("Pokémon data already initialized.")
                return
            }

            val mapper = jacksonObjectMapper().apply {
                configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
            }
            val file = ClassPathResource("Pokedex.json").file
            val pokedex: List<PokemonDTO> = mapper.readValue(file)

            val pokemons = pokedex.mapNotNull { entry ->
                if (entry.name.english.isBlank()) {
                    logger.warn("Skipping Pokémon ${entry.id} due to empty name")
                    null
                } else {
                    val image = PokemonImage(
                        pokedex = 0, // Auto-generated by JPA
                        imageUrl = try {
                            URI(entry.image.hires).toURL()
                        } catch (e: Exception) {
                            logger.warn("Invalid URL for Pokémon ${entry.id}: ${entry.image.hires}")
                            URI("https://example.com/default.png").toURL()
                        }
                    )

                    Pokemon(
                        pokedex = entry.id.toLong(),
                        name = entry.name.english,
                        type = entry.type.mapNotNull { typeName ->
                            try {
                                PokemonType.valueOf(typeName.uppercase())
                            } catch (e: IllegalArgumentException) {
                                logger.warn("Unknown type '${typeName}' for Pokémon ${entry.id}")
                                null
                            }
                        }.toSet(),
                        image = image
                    )
                }
            }

            pokemonRepository.saveAll(pokemons)
            logger.info("Successfully initialized ${pokemons.size} Pokémon.")
        } catch (e: Exception) {
            logger.error("Failed to initialize Pokémon data: ${e.message}", e)
            throw RuntimeException("Initialization failed", e)
        }
    }
}